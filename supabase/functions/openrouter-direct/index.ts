import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

interface ChatRequest {
  question: string;
  language?: string;
}

serve(async (req) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] OpenRouter Direct API request received`);

  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    console.log("Handling CORS preflight");
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Read OpenRouter API key from environment
    const API_KEY = Deno.env.get("OPENROUTER_API_KEY") ?? "";
    if (!API_KEY) {
      console.error("OPENROUTER_API_KEY is not configured");
      return new Response(
        JSON.stringify({
          success: false,
          error: "OpenRouter is not configured",
        }),
        {
          status: 500,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    console.log("=== OPENROUTER DIRECT API TEST ===");

    const body: ChatRequest = await req
      .json()
      .catch(() => ({ question: "What fertilizer is best for rice farming?" }));
    const { question, language = "english" } = body;

    console.log("Question:", question);
    console.log("Language:", language);

    // Use the latest free models available on OpenRouter
    const models = [
      "qwen/qwen-2.5-7b-instruct:free",
      "meta-llama/llama-3.2-1b-instruct:free",
      "google/gemma-2-9b-it:free",
      "huggingface/zephyr-7b-beta:free",
    ];

    console.log("Testing models:", models);

    for (let i = 0; i < models.length; i++) {
      const model = models[i];
      console.log(`\n--- ATTEMPT ${i + 1}: Testing ${model} ---`);

      try {
        // Language-specific response instructions
        const getSystemPrompt = (lang: string) => {
          const prompts = {
            english: `You are a knowledgeable agricultural AI assistant specializing in farming advice for English-speaking farmers. Your expertise includes:

ЁЯМ╛ Crops: Rice, wheat, corn, cotton, sugarcane, tea, coffee, spices, vegetables, fruits
ЁЯРЫ Pest Management: identification, natural solutions, integrated pest management  
ЁЯТз Irrigation: water management, drip irrigation, rainwater harvesting
ЁЯзк Soil Health: testing, fertilization, composting, soil conservation
ЁЯМ▒ Seeds: variety selection, seed treatment, germination
ЁЯМжя╕П Weather: seasonal advice, climate adaptation, timing of operations
ЁЯТ░ Markets: price trends, crop planning, value addition
ЁЯФз Tools: modern farming tools, mechanization

Provide practical, actionable advice in English suitable for farmers. Include measurements, timing, and local best practices when possible.

If asked about non-farming topics, politely redirect to agricultural matters.

User Question: ${question}

Please respond in English with detailed, practical farming advice.`,

            tamil: `роирпАроЩрпНроХро│рпН родрооро┐ро┤рпНроиро╛роЯрпБ ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХро╛рой роЕройрпБрокро╡роорпН ро╡ро╛ропрпНроирпНрод ро╡ро┐ро╡роЪро╛роп роЖро▓рпЛроЪроХро░рпН. роирпАроЩрпНроХро│рпН родрооро┐ро┤ро┐ро▓рпН родрпЖро│ро┐ро╡ро╛роХро╡рпБроорпН, роЕро┤роХро╛роХро╡рпБроорпН, роироЯрпИроорпБро▒рпИропро╛роХро╡рпБроорпН рокродро┐ро▓рпН роЕро│ро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.

**роЙроЩрпНроХро│рпН роиро┐рокрпБрогродрпНродрпБро╡ рокроХрпБродро┐роХро│рпН:**

ЁЯМ╛ **рокропро┐ро░рпНроХро│рпН:** роирпЖро▓рпН, роХрпЛродрпБроорпИ, роороХрпНроХро╛роЪрпНроЪрпЛро│роорпН, рокро░рпБродрпНродро┐, роХро░рпБроорпНрокрпБ, родрпЗроирпАро░рпН, роХро╛рокро┐, роороЪро╛ро▓ро╛, роХро╛ропрпНроХро▒ро┐роХро│рпН, рокро┤роЩрпНроХро│рпН
ЁЯРЫ **рокрпВроЪрпНроЪро┐ роорпЗро▓ро╛рогрпНроорпИ:** роЕроЯрпИропро╛ро│роорпН, роЗропро▒рпНроХрпИ родрпАро░рпНро╡рпБроХро│рпН, роТро░рпБроЩрпНроХро┐рогрпИроирпНрод рокрпВроЪрпНроЪро┐ роорпЗро▓ро╛рогрпНроорпИ
ЁЯТз **роирпАро░рпНрокрпНрокро╛роЪройроорпН:** роирпАро░рпН роорпЗро▓ро╛рогрпНроорпИ, родрпБро│ро┐ роирпАро░рпНрокрпНрокро╛роЪройроорпН, рооро┤рпИроирпАро░рпН роЪрпЗроХро░ро┐рокрпНрокрпБ
ЁЯзк **роорогрпН роЖро░рпЛроХрпНроХро┐ропроорпН:** рокро░ро┐роЪрпЛродройрпИ, роЙро░рооро┐роЯро▓рпН, роЙро░роорпН родропро╛ро░ро┐родрпНродро▓рпН, роорогрпН рокро╛родрпБроХро╛рокрпНрокрпБ
ЁЯМ▒ **ро╡ро┐родрпИроХро│рпН:** ро╡роХрпИ родрпЗро░рпНро╡рпБ, ро╡ро┐родрпИ роЪро┐роХро┐роЪрпНроЪрпИ, роорпБро│рпИрокрпНрокрпБ
ЁЯМжя╕П **ро╡ро╛ройро┐ро▓рпИ:** рокро░рпБро╡роХро╛ро▓ роЖро▓рпЛроЪройрпИ, роХро╛ро▓роиро┐ро▓рпИ родро┤рпБро╡ро▓рпН, роЪрпЖропро▓рпНрокро╛роЯрпБроХро│ро┐ройрпН роирпЗро░роорпН
ЁЯТ░ **роЪроирпНродрпИроХро│рпН:** ро╡ро┐ро▓рпИ рокрпЛроХрпНроХрпБроХро│рпН, рокропро┐ро░рпН родро┐роЯрпНроЯрооро┐роЯро▓рпН, роородро┐рокрпНрокрпБ роЪрпЗро░рпНродрпНродро▓рпН
ЁЯФз **роХро░рпБро╡ро┐роХро│рпН:** роиро╡рпАрой ро╡ро┐ро╡роЪро╛роп роХро░рпБро╡ро┐роХро│рпН, роЗропроирпНродро┐ро░рооропрооро╛роХрпНроХро▓рпН

**рокродро┐ро▓рпН роЕро│ро┐роХрпНроХрпБроорпН роорпБро▒рпИ:**
тАв родрооро┐ро┤рпНроиро╛роЯрпБ ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХрпБ роПро▒рпНро▒ роОро│ро┐роп, родрпЖро│ро┐ро╡ро╛рой родрооро┐ро┤ро┐ро▓рпН рокродро┐ро▓рпН роХрпКроЯрпБроЩрпНроХро│рпН
тАв рокродро┐ро▓рпИ роорпБроХрпНроХро┐роп рокроХрпБродро┐роХро│ро╛роХ рокро┐ро░ро┐родрпНродрпБ родро▓рпИрокрпНрокрпБроХро│рпБроЯройрпН роЕро┤роХро╛роХ роТро┤рпБроЩрпНроХрпБрокроЯрпБродрпНродрпБроЩрпНроХро│рпН
тАв роЕро│ро╡рпБроХро│рпН, роирпЗро░роорпН, рооро▒рпНро▒рпБроорпН роЙро│рпНро│рпВро░рпН роЪро┐ро▒роирпНрод роироЯрпИроорпБро▒рпИроХро│рпИ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН
тАв роОрогрпНроХро│ро┐ро▓рпН (1, 2, 3) роЕро▓рпНро▓родрпБ рокрпБро│рпНро│ро┐роХро│ро┐ро▓рпН (тАв) роорпБроХрпНроХро┐роп ро╡ро┐ро╖ропроЩрпНроХро│рпИ ро╡ро░ро┐роЪрпИрокрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН
тАв родрооро┐ро┤роХ ро╡ро┐ро╡роЪро╛ропродрпНродро┐ро▒рпНроХрпБ роПро▒рпНро▒ роЙро│рпНро│рпВро░рпН роорпБро▒рпИроХро│рпИропрпБроорпН рокро░ро┐роирпНродрпБро░рпИроХрпНроХро╡рпБроорпН

**роЙродро╛ро░рогроорпН рокродро┐ро▓рпН роХроЯрпНроЯроорпИрокрпНрокрпБ:**
**роорпБроХрпНроХро┐роп рокродро┐ро▓рпН:**
[родрпЖро│ро┐ро╡ро╛рой ро╡ро┐ро│роХрпНроХроорпН]

**роЪрпЖропрпНроорпБро▒рпИ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН:**
1. [рокроЯро┐ роТройрпНро▒рпБ]
2. [рокроЯро┐ роЗро░рогрпНроЯрпБ]
3. [рокроЯро┐ роорпВройрпНро▒рпБ]

**роорпБроХрпНроХро┐роп роХрпБро▒ро┐рокрпНрокрпБроХро│рпН:**
тАв [роорпБроХрпНроХро┐роп роХрпБро▒ро┐рокрпНрокрпБ 1]
тАв [роорпБроХрпНроХро┐роп роХрпБро▒ро┐рокрпНрокрпБ 2]

рокропройро░рпН роХрпЗро│рпНро╡ро┐: ${question}

роорпЗро▓рпЗ роЙро│рпНро│ ро╡ро┤ро┐роорпБро▒рпИроХро│ро┐ройрпНрокроЯро┐ родрооро┐ро┤ро┐ро▓рпН роЕро┤роХро╛роХ роТро┤рпБроЩрпНроХрпБрокроЯрпБродрпНродрокрпНрокроЯрпНроЯ, ро╡ро┐ро░ро┐ро╡ро╛рой ро╡ро┐ро╡роЪро╛роп роЖро▓рпЛроЪройрпИропрпИ роЕро│ро┐ропрпБроЩрпНроХро│рпН.`,

            hindi: `рдЖрдк рд╣рд┐рдВрджреА рдмреЛрд▓рдиреЗ рд╡рд╛рд▓реЗ рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ рдореЗрдВ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ AI рд╕рд╣рд╛рдпрдХ рд╣реИрдВред рдЖрдкрдХреА рд╡рд┐рд╢реЗрд╖рдЬреНрдЮрддрд╛ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реИ:

ЁЯМ╛ рдлрд╕рд▓реЗрдВ: рдЪрд╛рд╡рд▓, рдЧреЗрд╣реВрдВ, рдордХреНрдХрд╛, рдХрдкрд╛рд╕, рдЧрдиреНрдирд╛, рдЪрд╛рдп, рдХреЙрдлреА, рдорд╕рд╛рд▓реЗ, рд╕рдмреНрдЬрд┐рдпрд╛рдВ, рдлрд▓
ЁЯРЫ рдХреАрдЯ рдкреНрд░рдмрдВрдзрди: рдкрд╣рдЪрд╛рди, рдкреНрд░рд╛рдХреГрддрд┐рдХ рд╕рдорд╛рдзрд╛рди, рдПрдХреАрдХреГрдд рдХреАрдЯ рдкреНрд░рдмрдВрдзрди
ЁЯТз рд╕рд┐рдВрдЪрд╛рдИ: рдЬрд▓ рдкреНрд░рдмрдВрдзрди, рдбреНрд░рд┐рдк рд╕рд┐рдВрдЪрд╛рдИ, рд╡рд░реНрд╖рд╛ рдЬрд▓ рд╕рдВрдЪрдпрди
ЁЯзк рдорд┐рдЯреНрдЯреА рд╕реНрд╡рд╛рд╕реНрдереНрдп: рдкрд░реАрдХреНрд╖рдг, рдЙрд░реНрд╡рд░реАрдХрд░рдг, рдХрдВрдкреЛрд╕реНрдЯ, рдорд┐рдЯреНрдЯреА рд╕рдВрд░рдХреНрд╖рдг
ЁЯМ▒ рдмреАрдЬ: рдХрд┐рд╕реНрдо рдЪрдпрди, рдмреАрдЬ рдЙрдкрдЪрд╛рд░, рдЕрдВрдХреБрд░рдг
ЁЯМжя╕П рдореМрд╕рдо: рдореМрд╕рдореА рд╕рд▓рд╛рд╣, рдЬрд▓рд╡рд╛рдпреБ рдЕрдиреБрдХреВрд▓рди, рд╕рдВрдЪрд╛рд▓рди рдХрд╛ рд╕рдордп
ЁЯТ░ рдмрд╛рдЬрд╛рд░: рдореВрд▓реНрдп рд░реБрдЭрд╛рди, рдлрд╕рд▓ рдпреЛрдЬрдирд╛, рдореВрд▓реНрдп рд╕рдВрд╡рд░реНрдзрди
ЁЯФз рдЙрдкрдХрд░рдг: рдЖрдзреБрдирд┐рдХ рдХреГрд╖рд┐ рдЙрдкрдХрд░рдг, рдорд╢реАрдиреАрдХрд░рдг

рд╣рд┐рдВрджреА рдореЗрдВ рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ, рдХрд╛рд░реНрдпрд╛рдиреНрд╡рд┐рдд рдпреЛрдЧреНрдп рд╕рд▓рд╛рд╣ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╕рд░рд▓ рд╣рд┐рдВрджреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред

рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░рд╢реНрди: ${question}

рдХреГрдкрдпрд╛ рд╣рд┐рдВрджреА рдореЗрдВ рд╡рд┐рд╕реНрддреГрдд, рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреЗрдВред`,
          };

          return prompts[lang] || prompts.english;
        };

        const enhancedPrompt = getSystemPrompt(language);

        const requestPayload = {
          model: model,
          messages: [
            {
              role: "user",
              content: enhancedPrompt,
            },
          ],
          temperature: 0.7,
          max_tokens: 300, // Increased for more detailed Tamil responses
          top_p: 0.9,
          stream: false,
        };

        console.log(
          "Request payload:",
          JSON.stringify(requestPayload, null, 2)
        );

        const startTime = Date.now();

        const response = await fetch(
          "https://openrouter.ai/api/v1/chat/completions",
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${API_KEY}`,
              "Content-Type": "application/json",
              "HTTP-Referer": "https://growsmart-ai.com",
              "X-Title": "GrowSmart AI Direct Test",
              "User-Agent": "GrowSmart-AI/1.0",
            },
            body: JSON.stringify(requestPayload),
          }
        );

        const duration = Date.now() - startTime;
        console.log(`Request completed in ${duration}ms`);
        console.log("Response status:", response.status);
        console.log("Response statusText:", response.statusText);
        console.log(
          "Response headers:",
          Object.fromEntries([...response.headers.entries()])
        );

        // Log response regardless of status
        const responseText = await response.text();
        console.log("Raw response body:", responseText);

        if (!response.ok) {
          console.error(
            `тЭМ Model ${model} failed with status ${response.status}`
          );
          console.error("Error details:", responseText);

          // Check specific error types
          if (response.status === 401) {
            console.error("ЁЯЪи AUTHENTICATION ERROR - Invalid API key");
          } else if (response.status === 402) {
            console.error(
              "ЁЯТ│ PAYMENT REQUIRED - Credits exhausted or billing issue"
            );
          } else if (response.status === 429) {
            console.error("тП░ RATE LIMITED - Too many requests");
          } else if (response.status === 404) {
            console.error(
              "ЁЯФН MODEL NOT FOUND - Model may not exist or be unavailable"
            );
          }

          continue; // Try next model
        }

        // Parse successful response
        let data;
        try {
          data = JSON.parse(responseText);
        } catch (parseError) {
          console.error("Failed to parse JSON response:", parseError);
          continue;
        }

        console.log("Parsed response data:", JSON.stringify(data, null, 2));

        const aiResponse = data.choices?.[0]?.message?.content?.trim();
        const usage = data.usage;

        if (aiResponse && aiResponse.length > 5) {
          console.log(`тЬЕ SUCCESS with ${model}!`);
          console.log(`Response: "${aiResponse}"`);
          console.log("Usage:", usage);

          return new Response(
            JSON.stringify({
              success: true,
              response: aiResponse,
              model: model,
              language: language,
              question: question,
              timestamp: timestamp,
              duration_ms: duration,
              usage: usage,
              status: "openrouter_success",
              debug: {
                attempt: i + 1,
                total_attempts: models.length,
                api_status: response.status,
                response_length: aiResponse.length,
              },
            }),
            {
              headers: { ...corsHeaders, "Content-Type": "application/json" },
            }
          );
        } else {
          console.log(
            `тЭМ Model ${model} returned empty or invalid response:`,
            aiResponse
          );
        }
      } catch (fetchError) {
        console.error(`тЭМ Network error with ${model}:`, fetchError);
        console.error("Error details:", {
          name: fetchError.name,
          message: fetchError.message,
          stack: fetchError.stack,
        });
      }
    }

    // If all models failed
    console.log("ЁЯЪи ALL MODELS FAILED - Returning detailed error report");

    return new Response(
      JSON.stringify({
        success: false,
        error: "All OpenRouter models failed",
        api_key_used: API_KEY.substring(0, 25) + "...",
        models_tested: models,
        timestamp: timestamp,
        recommendation:
          "Check API key validity, billing status, and model availability",
        fallback_available: true,
      }),
      {
        status: 200, // Return 200 to avoid client errors
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  } catch (error) {
    console.error("ЁЯЪи CRITICAL ERROR in OpenRouter Direct function:", error);

    return new Response(
      JSON.stringify({
        success: false,
        error: "Critical function error",
        details: error.message,
        timestamp: timestamp,
      }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }
});
